{"ast":null,"code":"import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\nexport function windowToggle(openings, closingSelector) {\n  return operate(function (source, subscriber) {\n    var windows = [];\n    var handleError = function (err) {\n      while (0 < windows.length) {\n        windows.shift().error(err);\n      }\n      subscriber.error(err);\n    };\n    innerFrom(openings).subscribe(createOperatorSubscriber(subscriber, function (openValue) {\n      var window = new Subject();\n      windows.push(window);\n      var closingSubscription = new Subscription();\n      var closeWindow = function () {\n        arrRemove(windows, window);\n        window.complete();\n        closingSubscription.unsubscribe();\n      };\n      var closingNotifier;\n      try {\n        closingNotifier = innerFrom(closingSelector(openValue));\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n      subscriber.next(window.asObservable());\n      closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n    }, noop));\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n      var windowsCopy = windows.slice();\n      try {\n        for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {\n          var window_1 = windowsCopy_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (0 < windows.length) {\n        windows.shift().complete();\n      }\n      subscriber.complete();\n    }, handleError, function () {\n      while (0 < windows.length) {\n        windows.shift().unsubscribe();\n      }\n    }));\n  });\n}\n//# sourceMappingURL=windowToggle.js.map","map":{"version":3,"names":["__values","Subject","Subscription","operate","innerFrom","createOperatorSubscriber","noop","arrRemove","windowToggle","openings","closingSelector","source","subscriber","windows","handleError","err","length","shift","error","subscribe","openValue","window","push","closingSubscription","closeWindow","complete","unsubscribe","closingNotifier","next","asObservable","add","value","e_1","_a","windowsCopy","slice","windowsCopy_1","windowsCopy_1_1","done","window_1","e_1_1","return","call"],"sources":["/Users/katerina/Projects/nrwl/test_nx_workspaces/imported-libs/node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js"],"sourcesContent":["import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\nexport function windowToggle(openings, closingSelector) {\n    return operate(function (source, subscriber) {\n        var windows = [];\n        var handleError = function (err) {\n            while (0 < windows.length) {\n                windows.shift().error(err);\n            }\n            subscriber.error(err);\n        };\n        innerFrom(openings).subscribe(createOperatorSubscriber(subscriber, function (openValue) {\n            var window = new Subject();\n            windows.push(window);\n            var closingSubscription = new Subscription();\n            var closeWindow = function () {\n                arrRemove(windows, window);\n                window.complete();\n                closingSubscription.unsubscribe();\n            };\n            var closingNotifier;\n            try {\n                closingNotifier = innerFrom(closingSelector(openValue));\n            }\n            catch (err) {\n                handleError(err);\n                return;\n            }\n            subscriber.next(window.asObservable());\n            closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n        }, noop));\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            var e_1, _a;\n            var windowsCopy = windows.slice();\n            try {\n                for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {\n                    var window_1 = windowsCopy_1_1.value;\n                    window_1.next(value);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }, function () {\n            while (0 < windows.length) {\n                windows.shift().complete();\n            }\n            subscriber.complete();\n        }, handleError, function () {\n            while (0 < windows.length) {\n                windows.shift().unsubscribe();\n            }\n        }));\n    });\n}\n//# sourceMappingURL=windowToggle.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}