{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/Users/katerina/Projects/nrwl/test_nx_workspaces/imported-libs/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DocsRenderer = void 0;\nconst preview_api_1 = require(\"@storybook/preview-api\");\nconst core_events_1 = require(\"@storybook/core-events\");\nconst AbstractRenderer_1 = require(\"./AbstractRenderer\");\nclass DocsRenderer extends AbstractRenderer_1.AbstractRenderer {\n  render(options) {\n    var _superprop_getRender = () => super.render,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      const channel = preview_api_1.addons.getChannel();\n      /**\n       * Destroy and recreate the PlatformBrowserDynamic of angular\n       * For several stories to be rendered in the same docs we should\n       * not destroy angular between each rendering but do it when the\n       * rendered stories are not needed anymore.\n       *\n       * Note for improvement: currently there is one event per story\n       * rendered in the doc. But one event could be enough for the whole docs\n       *\n       */\n      channel.once(core_events_1.STORY_CHANGED, /*#__PURE__*/_asyncToGenerator(function* () {\n        yield DocsRenderer.resetPlatformBrowserDynamic();\n      }));\n      /**\n       * Destroy and recreate the PlatformBrowserDynamic of angular\n       * when doc re render. Allows to call ngOnDestroy of angular\n       * for previous component\n       */\n      channel.once(core_events_1.DOCS_RENDERED, /*#__PURE__*/_asyncToGenerator(function* () {\n        yield DocsRenderer.resetPlatformBrowserDynamic();\n      }));\n      yield _superprop_getRender().call(_this, {\n        ...options,\n        forced: false\n      });\n    })();\n  }\n  beforeFullRender() {\n    return _asyncToGenerator(function* () {})();\n  }\n  afterFullRender() {\n    return _asyncToGenerator(function* () {\n      yield AbstractRenderer_1.AbstractRenderer.resetCompiledComponents();\n    })();\n  }\n}\nexports.DocsRenderer = DocsRenderer;","map":{"version":3,"names":["Object","defineProperty","exports","value","DocsRenderer","preview_api_1","require","core_events_1","AbstractRenderer_1","AbstractRenderer","render","options","channel","addons","getChannel","once","STORY_CHANGED","resetPlatformBrowserDynamic","DOCS_RENDERED","forced","beforeFullRender","afterFullRender","resetCompiledComponents"],"sources":["/Users/katerina/Projects/nrwl/test_nx_workspaces/imported-libs/node_modules/@storybook/angular/dist/client/angular-beta/DocsRenderer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DocsRenderer = void 0;\nconst preview_api_1 = require(\"@storybook/preview-api\");\nconst core_events_1 = require(\"@storybook/core-events\");\nconst AbstractRenderer_1 = require(\"./AbstractRenderer\");\nclass DocsRenderer extends AbstractRenderer_1.AbstractRenderer {\n    async render(options) {\n        const channel = preview_api_1.addons.getChannel();\n        /**\n         * Destroy and recreate the PlatformBrowserDynamic of angular\n         * For several stories to be rendered in the same docs we should\n         * not destroy angular between each rendering but do it when the\n         * rendered stories are not needed anymore.\n         *\n         * Note for improvement: currently there is one event per story\n         * rendered in the doc. But one event could be enough for the whole docs\n         *\n         */\n        channel.once(core_events_1.STORY_CHANGED, async () => {\n            await DocsRenderer.resetPlatformBrowserDynamic();\n        });\n        /**\n         * Destroy and recreate the PlatformBrowserDynamic of angular\n         * when doc re render. Allows to call ngOnDestroy of angular\n         * for previous component\n         */\n        channel.once(core_events_1.DOCS_RENDERED, async () => {\n            await DocsRenderer.resetPlatformBrowserDynamic();\n        });\n        await super.render({ ...options, forced: false });\n    }\n    async beforeFullRender() { }\n    async afterFullRender() {\n        await AbstractRenderer_1.AbstractRenderer.resetCompiledComponents();\n    }\n}\nexports.DocsRenderer = DocsRenderer;\n"],"mappings":"AAAA,YAAY;;AAAC;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,MAAMC,aAAa,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMC,aAAa,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAME,kBAAkB,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AACxD,MAAMF,YAAY,SAASI,kBAAkB,CAACC,gBAAgB,CAAC;EACrDC,MAAM,CAACC,OAAO,EAAE;IAAA;MAAA;IAAA;MAClB,MAAMC,OAAO,GAAGP,aAAa,CAACQ,MAAM,CAACC,UAAU,EAAE;MACjD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACQF,OAAO,CAACG,IAAI,CAACR,aAAa,CAACS,aAAa,iCAAE,aAAY;QAClD,MAAMZ,YAAY,CAACa,2BAA2B,EAAE;MACpD,CAAC,EAAC;MACF;AACR;AACA;AACA;AACA;MACQL,OAAO,CAACG,IAAI,CAACR,aAAa,CAACW,aAAa,iCAAE,aAAY;QAClD,MAAMd,YAAY,CAACa,2BAA2B,EAAE;MACpD,CAAC,EAAC;MACF,MAAM,mCAAa;QAAE,GAAGN,OAAO;QAAEQ,MAAM,EAAE;MAAM,CAAC,CAAC;IAAC;EACtD;EACMC,gBAAgB,GAAG;IAAA;EAAE;EACrBC,eAAe,GAAG;IAAA;MACpB,MAAMb,kBAAkB,CAACC,gBAAgB,CAACa,uBAAuB,EAAE;IAAC;EACxE;AACJ;AACApB,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}