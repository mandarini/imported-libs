{"ast":null,"code":"/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react';\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({});\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent;\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components);\n    return React.createElement(Component, {\n      ...props,\n      allComponents\n    });\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext);\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents);\n    }\n    return {\n      ...contextComponents,\n      ...components\n    };\n  }, [contextComponents, components]);\n}\n\n/** @type {Components} */\nconst emptyObject = {};\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({\n  components,\n  children,\n  disableParentContext\n}) {\n  let allComponents = useMDXComponents(components);\n  if (disableParentContext) {\n    allComponents = components || emptyObject;\n  }\n  return React.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, children);\n}","map":{"version":3,"names":["React","MDXContext","createContext","withMDXComponents","Component","boundMDXComponent","props","allComponents","useMDXComponents","components","createElement","contextComponents","useContext","useMemo","emptyObject","MDXProvider","children","disableParentContext","Provider","value"],"sources":["/Users/katerina/Projects/nrwl/test_nx_workspaces/imported-libs/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGD,KAAK,CAACE,aAAa,CAAC,CAAC,CAAC,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiB,CAACC,SAAS,EAAE;EAC3C,OAAOC,iBAAiB;;EAExB;AACF;AACA;AACA;EACE,SAASA,iBAAiB,CAACC,KAAK,EAAE;IAChC,MAAMC,aAAa,GAAGC,gBAAgB,CAACF,KAAK,CAACG,UAAU,CAAC;IACxD,OAAOT,KAAK,CAACU,aAAa,CAACN,SAAS,EAAE;MAAC,GAAGE,KAAK;MAAEC;IAAa,CAAC,CAAC;EAClE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgB,CAACC,UAAU,EAAE;EAC3C,MAAME,iBAAiB,GAAGX,KAAK,CAACY,UAAU,CAACX,UAAU,CAAC;EACtD;EACA,OAAOD,KAAK,CAACa,OAAO,CAAC,MAAM;IACzB;IACA,IAAI,OAAOJ,UAAU,KAAK,UAAU,EAAE;MACpC,OAAOA,UAAU,CAACE,iBAAiB,CAAC;IACtC;IAEA,OAAO;MAAC,GAAGA,iBAAiB;MAAE,GAAGF;IAAU,CAAC;EAC9C,CAAC,EAAE,CAACE,iBAAiB,EAAEF,UAAU,CAAC,CAAC;AACrC;;AAEA;AACA,MAAMK,WAAW,GAAG,CAAC,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAAC;EAACN,UAAU;EAAEO,QAAQ;EAAEC;AAAoB,CAAC,EAAE;EACxE,IAAIV,aAAa,GAAGC,gBAAgB,CAACC,UAAU,CAAC;EAEhD,IAAIQ,oBAAoB,EAAE;IACxBV,aAAa,GAAGE,UAAU,IAAIK,WAAW;EAC3C;EAEA,OAAOd,KAAK,CAACU,aAAa,CACxBT,UAAU,CAACiB,QAAQ,EACnB;IAACC,KAAK,EAAEZ;EAAa,CAAC,EACtBS,QAAQ,CACT;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}