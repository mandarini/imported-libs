{"ast":null,"code":"// src/index.ts\nimport startCase from \"lodash/startCase\";\n\n// src/includeConditionalArg.ts\nimport isEqual from \"lodash/isEqual\";\nvar count = vals => vals.map(v => typeof v !== \"undefined\").filter(Boolean).length;\nvar testValue = (cond, value) => {\n  const {\n    exists,\n    eq,\n    neq,\n    truthy\n  } = cond;\n  if (count([exists, eq, neq, truthy]) > 1) {\n    throw new Error(`Invalid conditional test ${JSON.stringify({\n      exists,\n      eq,\n      neq\n    })}`);\n  }\n  if (typeof eq !== \"undefined\") {\n    return isEqual(value, eq);\n  }\n  if (typeof neq !== \"undefined\") {\n    return !isEqual(value, neq);\n  }\n  if (typeof exists !== \"undefined\") {\n    const valueExists = typeof value !== \"undefined\";\n    return exists ? valueExists : !valueExists;\n  }\n  const shouldBeTruthy = typeof truthy === \"undefined\" ? true : truthy;\n  return shouldBeTruthy ? !!value : !value;\n};\nvar includeConditionalArg = (argType, args, globals) => {\n  if (!argType.if) return true;\n  const {\n    arg,\n    global\n  } = argType.if;\n  if (count([arg, global]) !== 1) {\n    throw new Error(`Invalid conditional value ${JSON.stringify({\n      arg,\n      global\n    })}`);\n  }\n  const value = arg ? args[arg] : globals[global];\n  return testValue(argType.if, value);\n};\n\n// src/index.ts\nvar sanitize = string => {\n  return string.toLowerCase().replace(/[ ’–—―′¿'`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, \"-\").replace(/-+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n};\nvar sanitizeSafe = (string, part) => {\n  const sanitized = sanitize(string);\n  if (sanitized === \"\") {\n    throw new Error(`Invalid ${part} '${string}', must include alphanumeric characters`);\n  }\n  return sanitized;\n};\nvar toId = (kind, name) => `${sanitizeSafe(kind, \"kind\")}${name ? `--${sanitizeSafe(name, \"name\")}` : \"\"}`;\nvar storyNameFromExport = key => startCase(key);\nfunction matches(storyKey, arrayOrRegex) {\n  if (Array.isArray(arrayOrRegex)) {\n    return arrayOrRegex.includes(storyKey);\n  }\n  return storyKey.match(arrayOrRegex);\n}\nfunction isExportStory(key, {\n  includeStories,\n  excludeStories\n}) {\n  return key !== \"__esModule\" && (!includeStories || matches(key, includeStories)) && (!excludeStories || !matches(key, excludeStories));\n}\nvar parseKind = (kind, {\n  rootSeparator,\n  groupSeparator\n}) => {\n  const [root, remainder] = kind.split(rootSeparator, 2);\n  const groups = (remainder || kind).split(groupSeparator).filter(i => !!i);\n  return {\n    root: remainder ? root : null,\n    groups\n  };\n};\nexport { includeConditionalArg, isExportStory, parseKind, sanitize, storyNameFromExport, toId };","map":{"version":3,"names":["startCase","isEqual","count","vals","map","v","filter","Boolean","length","testValue","cond","value","exists","eq","neq","truthy","Error","JSON","stringify","valueExists","shouldBeTruthy","includeConditionalArg","argType","args","globals","if","arg","global","sanitize","string","toLowerCase","replace","sanitizeSafe","part","sanitized","toId","kind","name","storyNameFromExport","key","matches","storyKey","arrayOrRegex","Array","isArray","includes","match","isExportStory","includeStories","excludeStories","parseKind","rootSeparator","groupSeparator","root","remainder","split","groups","i"],"sources":["/Users/katerina/Projects/nrwl/test_nx_workspaces/imported-libs/node_modules/@storybook/csf/dist/index.mjs"],"sourcesContent":["// src/index.ts\nimport startCase from \"lodash/startCase\";\n\n// src/includeConditionalArg.ts\nimport isEqual from \"lodash/isEqual\";\nvar count = (vals) => vals.map((v) => typeof v !== \"undefined\").filter(Boolean).length;\nvar testValue = (cond, value) => {\n  const { exists, eq, neq, truthy } = cond;\n  if (count([exists, eq, neq, truthy]) > 1) {\n    throw new Error(`Invalid conditional test ${JSON.stringify({ exists, eq, neq })}`);\n  }\n  if (typeof eq !== \"undefined\") {\n    return isEqual(value, eq);\n  }\n  if (typeof neq !== \"undefined\") {\n    return !isEqual(value, neq);\n  }\n  if (typeof exists !== \"undefined\") {\n    const valueExists = typeof value !== \"undefined\";\n    return exists ? valueExists : !valueExists;\n  }\n  const shouldBeTruthy = typeof truthy === \"undefined\" ? true : truthy;\n  return shouldBeTruthy ? !!value : !value;\n};\nvar includeConditionalArg = (argType, args, globals) => {\n  if (!argType.if)\n    return true;\n  const { arg, global } = argType.if;\n  if (count([arg, global]) !== 1) {\n    throw new Error(`Invalid conditional value ${JSON.stringify({ arg, global })}`);\n  }\n  const value = arg ? args[arg] : globals[global];\n  return testValue(argType.if, value);\n};\n\n// src/index.ts\nvar sanitize = (string) => {\n  return string.toLowerCase().replace(/[ ’–—―′¿'`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, \"-\").replace(/-+/g, \"-\").replace(/^-+/, \"\").replace(/-+$/, \"\");\n};\nvar sanitizeSafe = (string, part) => {\n  const sanitized = sanitize(string);\n  if (sanitized === \"\") {\n    throw new Error(`Invalid ${part} '${string}', must include alphanumeric characters`);\n  }\n  return sanitized;\n};\nvar toId = (kind, name) => `${sanitizeSafe(kind, \"kind\")}${name ? `--${sanitizeSafe(name, \"name\")}` : \"\"}`;\nvar storyNameFromExport = (key) => startCase(key);\nfunction matches(storyKey, arrayOrRegex) {\n  if (Array.isArray(arrayOrRegex)) {\n    return arrayOrRegex.includes(storyKey);\n  }\n  return storyKey.match(arrayOrRegex);\n}\nfunction isExportStory(key, { includeStories, excludeStories }) {\n  return key !== \"__esModule\" && (!includeStories || matches(key, includeStories)) && (!excludeStories || !matches(key, excludeStories));\n}\nvar parseKind = (kind, { rootSeparator, groupSeparator }) => {\n  const [root, remainder] = kind.split(rootSeparator, 2);\n  const groups = (remainder || kind).split(groupSeparator).filter((i) => !!i);\n  return {\n    root: remainder ? root : null,\n    groups\n  };\n};\nexport {\n  includeConditionalArg,\n  isExportStory,\n  parseKind,\n  sanitize,\n  storyNameFromExport,\n  toId\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}