{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sourceDecorator = exports.skipSourceRender = void 0;\nconst preview_api_1 = require(\"@storybook/preview-api\");\nconst docs_tools_1 = require(\"@storybook/docs-tools\");\nconst renderer_1 = require(\"../../renderer\");\nconst skipSourceRender = context => {\n  const sourceParams = context?.parameters.docs?.source;\n  // always render if the user forces it\n  if (sourceParams?.type === docs_tools_1.SourceType.DYNAMIC) {\n    return false;\n  }\n  // never render if the user is forcing the block to render code, or\n  // if the user provides code\n  return sourceParams?.code || sourceParams?.type === docs_tools_1.SourceType.CODE;\n};\nexports.skipSourceRender = skipSourceRender;\n/**\n * Angular source decorator.\n * @param storyFn Fn\n * @param context  StoryContext\n */\nconst sourceDecorator = (storyFn, context) => {\n  const story = storyFn();\n  if ((0, exports.skipSourceRender)(context)) {\n    return story;\n  }\n  const channel = preview_api_1.addons.getChannel();\n  const {\n    props,\n    template,\n    userDefinedTemplate\n  } = story;\n  const {\n    component,\n    argTypes\n  } = context;\n  let toEmit;\n  (0, preview_api_1.useEffect)(() => {\n    if (toEmit) {\n      channel.emit(docs_tools_1.SNIPPET_RENDERED, context.id, toEmit, 'angular');\n    }\n  });\n  if (component && !userDefinedTemplate) {\n    const source = (0, renderer_1.computesTemplateSourceFromComponent)(component, props, argTypes);\n    // We might have a story with a Directive or Service defined as the component\n    // In these cases there might exist a template, even if we aren't able to create source from component\n    if (source || template) {\n      toEmit = source || template;\n    }\n  } else if (template) {\n    toEmit = template;\n  }\n  return story;\n};\nexports.sourceDecorator = sourceDecorator;","map":{"version":3,"names":["Object","defineProperty","exports","value","sourceDecorator","skipSourceRender","preview_api_1","require","docs_tools_1","renderer_1","context","sourceParams","parameters","docs","source","type","SourceType","DYNAMIC","code","CODE","storyFn","story","channel","addons","getChannel","props","template","userDefinedTemplate","component","argTypes","toEmit","useEffect","emit","SNIPPET_RENDERED","id","computesTemplateSourceFromComponent"],"sources":["/Users/katerina/Projects/nrwl/test_nx_workspaces/imported-libs/node_modules/@storybook/angular/dist/client/docs/sourceDecorator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sourceDecorator = exports.skipSourceRender = void 0;\nconst preview_api_1 = require(\"@storybook/preview-api\");\nconst docs_tools_1 = require(\"@storybook/docs-tools\");\nconst renderer_1 = require(\"../../renderer\");\nconst skipSourceRender = (context) => {\n    const sourceParams = context?.parameters.docs?.source;\n    // always render if the user forces it\n    if (sourceParams?.type === docs_tools_1.SourceType.DYNAMIC) {\n        return false;\n    }\n    // never render if the user is forcing the block to render code, or\n    // if the user provides code\n    return sourceParams?.code || sourceParams?.type === docs_tools_1.SourceType.CODE;\n};\nexports.skipSourceRender = skipSourceRender;\n/**\n * Angular source decorator.\n * @param storyFn Fn\n * @param context  StoryContext\n */\nconst sourceDecorator = (storyFn, context) => {\n    const story = storyFn();\n    if ((0, exports.skipSourceRender)(context)) {\n        return story;\n    }\n    const channel = preview_api_1.addons.getChannel();\n    const { props, template, userDefinedTemplate } = story;\n    const { component, argTypes } = context;\n    let toEmit;\n    (0, preview_api_1.useEffect)(() => {\n        if (toEmit) {\n            channel.emit(docs_tools_1.SNIPPET_RENDERED, context.id, toEmit, 'angular');\n        }\n    });\n    if (component && !userDefinedTemplate) {\n        const source = (0, renderer_1.computesTemplateSourceFromComponent)(component, props, argTypes);\n        // We might have a story with a Directive or Service defined as the component\n        // In these cases there might exist a template, even if we aren't able to create source from component\n        if (source || template) {\n            toEmit = source || template;\n        }\n    }\n    else if (template) {\n        toEmit = template;\n    }\n    return story;\n};\nexports.sourceDecorator = sourceDecorator;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAGF,OAAO,CAACG,gBAAgB,GAAG,KAAK,CAAC;AAC3D,MAAMC,aAAa,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACvD,MAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAME,UAAU,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC5C,MAAMF,gBAAgB,GAAIK,OAAO,IAAK;EAClC,MAAMC,YAAY,GAAGD,OAAO,EAAEE,UAAU,CAACC,IAAI,EAAEC,MAAM;EACrD;EACA,IAAIH,YAAY,EAAEI,IAAI,KAAKP,YAAY,CAACQ,UAAU,CAACC,OAAO,EAAE;IACxD,OAAO,KAAK;EAChB;EACA;EACA;EACA,OAAON,YAAY,EAAEO,IAAI,IAAIP,YAAY,EAAEI,IAAI,KAAKP,YAAY,CAACQ,UAAU,CAACG,IAAI;AACpF,CAAC;AACDjB,OAAO,CAACG,gBAAgB,GAAGA,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA,MAAMD,eAAe,GAAG,CAACgB,OAAO,EAAEV,OAAO,KAAK;EAC1C,MAAMW,KAAK,GAAGD,OAAO,EAAE;EACvB,IAAI,CAAC,CAAC,EAAElB,OAAO,CAACG,gBAAgB,EAAEK,OAAO,CAAC,EAAE;IACxC,OAAOW,KAAK;EAChB;EACA,MAAMC,OAAO,GAAGhB,aAAa,CAACiB,MAAM,CAACC,UAAU,EAAE;EACjD,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAoB,CAAC,GAAGN,KAAK;EACtD,MAAM;IAAEO,SAAS;IAAEC;EAAS,CAAC,GAAGnB,OAAO;EACvC,IAAIoB,MAAM;EACV,CAAC,CAAC,EAAExB,aAAa,CAACyB,SAAS,EAAE,MAAM;IAC/B,IAAID,MAAM,EAAE;MACRR,OAAO,CAACU,IAAI,CAACxB,YAAY,CAACyB,gBAAgB,EAAEvB,OAAO,CAACwB,EAAE,EAAEJ,MAAM,EAAE,SAAS,CAAC;IAC9E;EACJ,CAAC,CAAC;EACF,IAAIF,SAAS,IAAI,CAACD,mBAAmB,EAAE;IACnC,MAAMb,MAAM,GAAG,CAAC,CAAC,EAAEL,UAAU,CAAC0B,mCAAmC,EAAEP,SAAS,EAAEH,KAAK,EAAEI,QAAQ,CAAC;IAC9F;IACA;IACA,IAAIf,MAAM,IAAIY,QAAQ,EAAE;MACpBI,MAAM,GAAGhB,MAAM,IAAIY,QAAQ;IAC/B;EACJ,CAAC,MACI,IAAIA,QAAQ,EAAE;IACfI,MAAM,GAAGJ,QAAQ;EACrB;EACA,OAAOL,KAAK;AAChB,CAAC;AACDnB,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}