{"ast":null,"code":"import { __commonJS } from \"./chunk-NNAAFZ4U.mjs\";\nvar require_graphql = __commonJS({\n  \"../../node_modules/refractor/lang/graphql.js\"(exports, module) {\n    module.exports = graphql;\n    graphql.displayName = \"graphql\";\n    graphql.aliases = [];\n    function graphql(Prism) {\n      Prism.languages.graphql = {\n        comment: /#.*/,\n        description: {\n          pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n          greedy: !0,\n          alias: \"string\",\n          inside: {\n            \"language-markdown\": {\n              pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n              lookbehind: !0,\n              inside: Prism.languages.markdown\n            }\n          }\n        },\n        string: {\n          pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n          greedy: !0\n        },\n        number: /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n        boolean: /\\b(?:false|true)\\b/,\n        variable: /\\$[a-z_]\\w*/i,\n        directive: {\n          pattern: /@[a-z_]\\w*/i,\n          alias: \"function\"\n        },\n        \"attr-name\": {\n          pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n          greedy: !0\n        },\n        \"atom-input\": {\n          pattern: /\\b[A-Z]\\w*Input\\b/,\n          alias: \"class-name\"\n        },\n        scalar: /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n        constant: /\\b[A-Z][A-Z_\\d]*\\b/,\n        \"class-name\": {\n          pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n          lookbehind: !0\n        },\n        fragment: {\n          pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n          lookbehind: !0,\n          alias: \"function\"\n        },\n        \"definition-mutation\": {\n          pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n          lookbehind: !0,\n          alias: \"function\"\n        },\n        \"definition-query\": {\n          pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n          lookbehind: !0,\n          alias: \"function\"\n        },\n        keyword: /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n        operator: /[!=|&]|\\.{3}/,\n        \"property-query\": /\\w+(?=\\s*\\()/,\n        object: /\\w+(?=\\s*\\{)/,\n        punctuation: /[!(){}\\[\\]:=,]/,\n        property: /\\w+/\n      }, Prism.hooks.add(\"after-tokenize\", function (env) {\n        if (env.language !== \"graphql\") return;\n        var validTokens = env.tokens.filter(function (token) {\n            return typeof token != \"string\" && token.type !== \"comment\" && token.type !== \"scalar\";\n          }),\n          currentIndex = 0;\n        function getToken(offset) {\n          return validTokens[currentIndex + offset];\n        }\n        function isTokenType(types, offset) {\n          offset = offset || 0;\n          for (var i2 = 0; i2 < types.length; i2++) {\n            var token = getToken(i2 + offset);\n            if (!token || token.type !== types[i2]) return !1;\n          }\n          return !0;\n        }\n        function findClosingBracket(open, close) {\n          for (var stackHeight = 1, i2 = currentIndex; i2 < validTokens.length; i2++) {\n            var token = validTokens[i2],\n              content = token.content;\n            if (token.type === \"punctuation\" && typeof content == \"string\") {\n              if (open.test(content)) stackHeight++;else if (close.test(content) && (stackHeight--, stackHeight === 0)) return i2;\n            }\n          }\n          return -1;\n        }\n        function addAlias(token, alias) {\n          var aliases = token.alias;\n          aliases ? Array.isArray(aliases) || (token.alias = aliases = [aliases]) : token.alias = aliases = [], aliases.push(alias);\n        }\n        for (; currentIndex < validTokens.length;) {\n          var startToken = validTokens[currentIndex++];\n          if (startToken.type === \"keyword\" && startToken.content === \"mutation\") {\n            var inputVariables = [];\n            if (isTokenType([\"definition-mutation\", \"punctuation\"]) && getToken(1).content === \"(\") {\n              currentIndex += 2;\n              var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n              if (definitionEnd === -1) continue;\n              for (; currentIndex < definitionEnd; currentIndex++) {\n                var t = getToken(0);\n                t.type === \"variable\" && (addAlias(t, \"variable-input\"), inputVariables.push(t.content));\n              }\n              currentIndex = definitionEnd + 1;\n            }\n            if (isTokenType([\"punctuation\", \"property-query\"]) && getToken(0).content === \"{\" && (currentIndex++, addAlias(getToken(0), \"property-mutation\"), inputVariables.length > 0)) {\n              var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n              if (mutationEnd === -1) continue;\n              for (var i = currentIndex; i < mutationEnd; i++) {\n                var varToken = validTokens[i];\n                varToken.type === \"variable\" && inputVariables.indexOf(varToken.content) >= 0 && addAlias(varToken, \"variable-input\");\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n});\nexport { require_graphql };","map":{"version":3,"names":["__commonJS","require_graphql","exports","module","graphql","displayName","aliases","Prism","languages","comment","description","pattern","greedy","alias","inside","lookbehind","markdown","string","number","boolean","variable","directive","scalar","constant","fragment","keyword","operator","object","punctuation","property","hooks","add","env","language","validTokens","tokens","filter","token","type","currentIndex","getToken","offset","isTokenType","types","i2","length","findClosingBracket","open","close","stackHeight","content","test","addAlias","Array","isArray","push","startToken","inputVariables","definitionEnd","t","mutationEnd","i","varToken","indexOf"],"sources":["/Users/katerina/Projects/nrwl/test_nx_workspaces/imported-libs/node_modules/@storybook/components/dist/chunk-EU3NKDVB.mjs"],"sourcesContent":["import{__commonJS}from\"./chunk-NNAAFZ4U.mjs\";var require_graphql=__commonJS({\"../../node_modules/refractor/lang/graphql.js\"(exports,module){module.exports=graphql;graphql.displayName=\"graphql\";graphql.aliases=[];function graphql(Prism){Prism.languages.graphql={comment:/#.*/,description:{pattern:/(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,greedy:!0,alias:\"string\",inside:{\"language-markdown\":{pattern:/(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,lookbehind:!0,inside:Prism.languages.markdown}}},string:{pattern:/\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,greedy:!0},number:/(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,boolean:/\\b(?:false|true)\\b/,variable:/\\$[a-z_]\\w*/i,directive:{pattern:/@[a-z_]\\w*/i,alias:\"function\"},\"attr-name\":{pattern:/\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,greedy:!0},\"atom-input\":{pattern:/\\b[A-Z]\\w*Input\\b/,alias:\"class-name\"},scalar:/\\b(?:Boolean|Float|ID|Int|String)\\b/,constant:/\\b[A-Z][A-Z_\\d]*\\b/,\"class-name\":{pattern:/(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,lookbehind:!0},fragment:{pattern:/(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,lookbehind:!0,alias:\"function\"},\"definition-mutation\":{pattern:/(\\bmutation\\s+)[a-zA-Z_]\\w*/,lookbehind:!0,alias:\"function\"},\"definition-query\":{pattern:/(\\bquery\\s+)[a-zA-Z_]\\w*/,lookbehind:!0,alias:\"function\"},keyword:/\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,operator:/[!=|&]|\\.{3}/,\"property-query\":/\\w+(?=\\s*\\()/,object:/\\w+(?=\\s*\\{)/,punctuation:/[!(){}\\[\\]:=,]/,property:/\\w+/},Prism.hooks.add(\"after-tokenize\",function(env){if(env.language!==\"graphql\")return;var validTokens=env.tokens.filter(function(token){return typeof token!=\"string\"&&token.type!==\"comment\"&&token.type!==\"scalar\"}),currentIndex=0;function getToken(offset){return validTokens[currentIndex+offset]}function isTokenType(types,offset){offset=offset||0;for(var i2=0;i2<types.length;i2++){var token=getToken(i2+offset);if(!token||token.type!==types[i2])return!1}return!0}function findClosingBracket(open,close){for(var stackHeight=1,i2=currentIndex;i2<validTokens.length;i2++){var token=validTokens[i2],content=token.content;if(token.type===\"punctuation\"&&typeof content==\"string\"){if(open.test(content))stackHeight++;else if(close.test(content)&&(stackHeight--,stackHeight===0))return i2}}return-1}function addAlias(token,alias){var aliases=token.alias;aliases?Array.isArray(aliases)||(token.alias=aliases=[aliases]):token.alias=aliases=[],aliases.push(alias)}for(;currentIndex<validTokens.length;){var startToken=validTokens[currentIndex++];if(startToken.type===\"keyword\"&&startToken.content===\"mutation\"){var inputVariables=[];if(isTokenType([\"definition-mutation\",\"punctuation\"])&&getToken(1).content===\"(\"){currentIndex+=2;var definitionEnd=findClosingBracket(/^\\($/,/^\\)$/);if(definitionEnd===-1)continue;for(;currentIndex<definitionEnd;currentIndex++){var t=getToken(0);t.type===\"variable\"&&(addAlias(t,\"variable-input\"),inputVariables.push(t.content))}currentIndex=definitionEnd+1}if(isTokenType([\"punctuation\",\"property-query\"])&&getToken(0).content===\"{\"&&(currentIndex++,addAlias(getToken(0),\"property-mutation\"),inputVariables.length>0)){var mutationEnd=findClosingBracket(/^\\{$/,/^\\}$/);if(mutationEnd===-1)continue;for(var i=currentIndex;i<mutationEnd;i++){var varToken=validTokens[i];varToken.type===\"variable\"&&inputVariables.indexOf(varToken.content)>=0&&addAlias(varToken,\"variable-input\")}}}}})}}});export{require_graphql};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}